# yaml-language-server: $schema=https://raw.githubusercontent.com/argoproj/argo-workflows/v3.5.5/api/jsonschema/schema.json

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tpl-bm-cogify
spec:
  templateDefaults:
    container:
      imagePullPolicy: Always
      image: ''
  entrypoint: main

  arguments:
    parameters:
      - name: version_basemaps_cli
        description: Version of the basemaps CLI docker container to use
        value: v8

      - name: version_argo_tasks
        description: Version of the argo-tasks CLI docker container to use
        value: v4

      - name: preset
        description: Import preset configuration, WebP for 4 band RGBA, LERC for 1 band DEM/DSM and ZSTD for everything else
        value: 'webp'
        enum:
          - 'webp'
          - 'lerc_10mm'
          - 'lerc_1mm'
          - 'zstd_17'

      - name: color_interpretation
        description: Color profile to use for the output imagery
        value: 'rgba'
        enum:
          - 'rgbi'
          - 'rgba'
          - 'elevation'
          - 'gray'

      - name: region
        description: Region of the dataset
        value: 'new-zealand'
        enum:
          - 'antarctica'
          - 'auckland'
          - 'bay-of-plenty'
          - 'canterbury'
          - 'gisborne'
          - 'global'
          - 'hawkes-bay'
          - 'manawatu-whanganui'
          - 'marlborough'
          - 'nelson'
          - 'new-zealand'
          - 'northland'
          - 'otago'
          - 'pacific-islands'
          - 'southland'
          - 'taranaki'
          - 'tasman'
          - 'waikato'
          - 'wellington'
          - 'west-coast'

      - name: source
        description: Source imagery location "s3://linz-imagery"
        value: 's3://linz-imagery-staging/test/sample/'

      - name: require_stac_collection
        description: Validate that a STAC collection.json exists with the source
        value: 'true'
        enum:
          - 'true'
          - 'false'

      - name: target
        description: Target location for output COGs
        value: 's3://linz-basemaps/'
        enum:
          - 's3://linz-basemaps/'
          - 's3://linz-basemaps-staging/'
          - 's3://linz-workflows-scratch/'

      - name: tile_matrix
        description: Output tile matrix, ";" separated list
        value: 'WebMercatorQuad'
        enum:
          - 'NZTM2000Quad'
          - 'WebMercatorQuad'

      - name: cutline
        description: Path to cutline to apply
        value: 's3://linz-basemaps-source/cutline/2025-04-30-cutline-nz-coasts-rural-and-urban.geojson'

      - name: cutline_blend
        description: Blending to use for cutline see gdal_translate#cblend
        value: '20'

      - name: group_size
        description: How many items to pass to each create-cog job
        value: '20'

      - name: create_overview
        description: 'Create overview after importing imagery.'
        value: 'true'
        enum:
          - 'true'
          - 'false'

      - name: background
        description: 'Background RGBA hexstring to fill empty space in the COG. Format: "#rrggbbaa"'
        value: ''

      - name: base_zoom_offset
        description: 'Adjust the base zoom level of the output COGS, "-1" reduce the target output resolution by one zoom level'
        value: ''

  templates:
    # Generate COGs for a specific tile matrix from a given collection of source imagery
    - name: main
      inputs:
        parameters:
          - name: source
          - name: target
          - name: tile_matrix
          - name: cutline
          - name: cutline_blend
          - name: group_size
          - name: preset
          - name: require_stac_collection
          - name: base_zoom_offset
          - name: background
      dag:
        tasks:
          # generate a tile covering from the source imagery
          - name: create-covering
            template: create-covering
            arguments:
              parameters:
                - name: source
                  value: '{{ inputs.parameters.source }}'
                - name: target
                  value: '{{ inputs.parameters.target }}'
                - name: preset
                  value: '{{ inputs.parameters.preset }}'
                - name: tile_matrix
                  value: '{{ inputs.parameters.tile_matrix }}'
                - name: cutline
                  value: '{{ inputs.parameters.cutline }}'
                - name: cutline_blend
                  value: '{{ inputs.parameters.cutline_blend }}'
                - name: base_zoom_offset
                  value: '{{ inputs.parameters.base_zoom_offset }}'
                - name: require_stac_collection
                  value: '{{ inputs.parameters.require_stac_collection }}'
                - name: background
                  value: '{{ inputs.parameters.background }}'
                - name: color_interpretation
                  value: '{{ inputs.parameters.color_interpretation }}'

          # Group covering output into chunks to pass to create-cog
          - name: group
            arguments:
              parameters:
                - name: size
                  value: '{{ inputs.parameters.group_size }}'
                - name: version
                  value: '{{= workflow.parameters.version_argo_tasks }}'
              artifacts:
                - name: input
                  from: '{{ tasks.create-covering.outputs.artifacts.tiles }}'
            templateRef:
              name: tpl-at-group
              template: main
            depends: create-covering

          # Create COGS from the grouped output of create-covering
          - name: create-cog
            depends: group
            template: create-cog
            withParam: '{{ tasks.group.outputs.parameters.output }}'
            arguments:
              parameters:
                - name: covering_grouped_id
                  value: '{{ item }}'
              artifacts:
                - name: covering_grouped
                  from: '{{ tasks.group.outputs.artifacts.output }}'

          # TODO: overviews are only supported in RGBA pipelines
          # once all COGs are created generate a more overviews to increase tile rendering performance
          - name: create-overview
            template: create-overview
            when: '{{workflow.parameters.create_overview}} == true'
            depends: create-cog
            arguments:
              parameters:
                - name: path
                  value: '{{ tasks.create-covering.outputs.parameters.target }}'

          # Create a basemaps config to view the imagery directly
          - name: create-config
            template: create-config
            depends: create-overview
            arguments:
              parameters:
                - name: path
                  value: '{{ tasks.create-covering.outputs.parameters.target }}'
                - name: title
                  value: '{{ tasks.create-covering.outputs.parameters.title }}'

      outputs:
        parameters:
          - name: target
            description: location of where the output tiffs were created
            valueFrom:
              parameter: '{{ tasks.create-covering.outputs.parameters.target }}'

    # Generate a tile covering for input imagery
    - name: create-covering
      nodeSelector:
        karpenter.sh/capacity-type: 'spot'
      inputs:
        parameters:
          - name: source
          - name: target
          - name: tile_matrix
          - name: cutline
          - name: cutline_blend
          - name: preset
          - name: color_interpretation
          - name: require_stac_collection
          - name: base_zoom_offset
          - name: background
      container:
        image: ghcr.io/linz/basemaps/cli:{{ workflow.parameters.version_basemaps_cli }}
        resources:
          requests:
            memory: 2Gi
        command: [node, index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.basemaps.json
        args:
          - 'cogify'
          - 'cover'
          - '--preset={{ inputs.parameters.preset }}'
          - '--preset-bands={{ inputs.parameters.color_interpretation }}'
          - '--tile-matrix={{ inputs.parameters.tile_matrix }}'
          - '--require-stac-collection={{ inputs.parameters.require_stac_collection }}'
          - "{{= sprig.empty(inputs.parameters.cutline) ? '' : '--cutline=' + inputs.parameters.cutline }}"
          - '--cutline-blend={{ inputs.parameters.cutline_blend }}'
          - "{{= sprig.empty(inputs.parameters.base_zoom_offset) ? '' : '--base-zoom-offset=' + inputs.parameters.base_zoom_offset }}"
          - "{{= sprig.empty(inputs.parameters.background) ? '' : '--background=' + inputs.parameters.background }}"
          - '--target={{= sprig.trim(inputs.parameters.target) }}'
          - '{{= sprig.trim(inputs.parameters.source) }}'
      outputs:
        parameters:
          - name: target
            description: output path for where the covering was written
            valueFrom:
              path: /tmp/cogify/cover-target

          - name: title
            description: Title for the covering
            valueFrom:
              path: /tmp/cogify/cover-title

        artifacts:
          - name: tiles
            path: /tmp/cogify/cover-items.json

    # Actually create COGs using gdal_translate on a large spot instances
    - name: create-cog
      nodeSelector:
        karpenter.sh/capacity-type: 'spot'
      inputs:
        artifacts:
          - name: covering_grouped
            path: /tmp/cogify/covering_grouped/
        parameters:
          - name: covering_grouped_id
      container:
        resources:
          requests:
            memory: 30Gi
            cpu: 15000m # AWS gives 2x cpu cores = memory for most instances
            ephemeral-storage: 98Gi # 2 pods per 200GB of storage
        image: ghcr.io/linz/basemaps/cli:{{ workflow.parameters.version_basemaps_cli }}
        command: [node, index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.basemaps.json
        args:
          - 'cogify'
          - 'create'
          - '--from-file={{= inputs.artifacts.covering_grouped.path }}{{inputs.parameters.covering_grouped_id}}.json'
          - '--concurrency=2'

    # Create a basemaps configuration file to view the imagery
    - name: create-config
      inputs:
        parameters:
          - name: path
            description: Location of the imagery to create config for
      container:
        image: ghcr.io/linz/basemaps/cli:{{ workflow.parameters.version_basemaps_cli }}
        command: [node, index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.basemaps.json
        args:
          - 'config'
          - 'create-config'
          - '{{ inputs.parameters.path }}'
      outputs:
        parameters:
          - name: url
            description: Basemaps URL to view the imagery
            valueFrom:
              path: '/tmp/cogify/config-url'
          - name: config
            description: Location of the config file
            valueFrom:
              path: '/tmp/cogify/config-path'

    # create additional overviews for any COGs found in the path
    - name: create-overview
      nodeSelector:
        karpenter.sh/capacity-type: 'spot'
      inputs:
        parameters:
          - name: path
            description: Location of the imagery to create overviews for
      container:
        resources:
          requests:
            memory: 7.8Gi
            cpu: 15000m
        image: ghcr.io/linz/basemaps/cli:v6
        command: [node, index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.basemaps.json
        args:
          - '-V'
          - 'create-overview'
          - '--source={{= sprig.trim(inputs.parameters.path) }}'
          - '--output={{= sprig.trim(inputs.parameters.path) }}'
