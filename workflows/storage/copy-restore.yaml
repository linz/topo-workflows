# yaml-language-server: $schema=https://raw.githubusercontent.com/argoproj/argo-workflows/v3.5.5/api/jsonschema/schema.json

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: test-af-copy-restore
spec:
  parallelism: 50 # TODO: decide on the parallelism
  nodeSelector:
    karpenter.sh/capacity-type: 'spot'
  entrypoint: main
  onExit: exit-handler
  podMetadata:
    labels:
      linz.govt.nz/category: storage
  arguments:
    parameters:
      - name: version_argo_tasks
        description: 'Specify a version of the argo-tasks image to use, e.g. "v4.1" or "latest"'
        value: 'v4'
      - name: version_topo_imagery
        description: 'Specify a version of the topo-imagery image to use, e.g. "v4.8" or "latest"'
        value: 'v7'
      - name: reports_location
        description: 'Location of the archive restore report manifest files'
        value: 's3://linz-workflows-scratch/restore/requests/linz-topographic-archive/afage/'
#        value: 's3://linz-workflows-scratch/restore/requests/'
  templateDefaults:
    container:
      imagePullPolicy: Always
      image: ''

  templates:
    - name: main
      retryStrategy:
        expression: 'false'
      inputs:
        parameters:
          - name: version_argo_tasks
            value: '{{workflow.parameters.version_argo_tasks}}'
          - name: version_topo_imagery
            value: '{{workflow.parameters.version_topo_imagery}}'
          - name: reports_location
            value: '{{workflow.parameters.reports_location}}'
      dag:
        tasks:
          - name: list-manifests
            template: list-manifests
            arguments:
              parameters:
                - name: version_argo_tasks
                  value: '{{inputs.parameters.version_argo_tasks}}'
                - name: reports_location
                  value: '{{inputs.parameters.reports_location}}'
          - name: verify-copy
            template: verify-copy
            arguments:
              parameters:
                - name: version_argo_tasks
                  value: '{{inputs.parameters.version_argo_tasks}}'
                - name: manifests
                  value: '{{item}}'
            withParam: '{{tasks.list-manifests.outputs.parameters.manifest_list}}'
            depends: 'list-manifests.Succeeded'

    - name: list-manifests
      inputs:
        parameters:
          - name: version_argo_tasks
          - name: reports_location
      retryStrategy:
        limit: '2' # force retrying this specific task
      container:
        image: '019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/argo-tasks:{{=sprig.trim(inputs.parameters.version_argo_tasks)}}'
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.json
        args:
          [
            'list',
            '--verbose',
            '--include',
            'manifest.json$',
            '--output',
            '/tmp/file_list.json',
            '{{=sprig.trim(inputs.parameters.reports_location)}}',
          ]
      outputs:
        parameters:
          - name: manifest_list
            valueFrom:
              path: /tmp/file_list.json

    - name: verify-copy
      inputs:
        parameters:
          - name: version_argo_tasks
          - name: manifests
      dag:
        tasks:
          - name: verify-copy-item
            arguments:
              parameters:
                - name: version_argo_tasks
                  value: "{{inputs.parameters.version_argo_tasks}}"
                - name: manifest
                  value: "{{item}}"
            template: verify-copy-item
            withParam: "{{inputs.parameters.manifests}}"

    - name: verify-copy-item
      inputs:
        parameters:
          - name: version_argo_tasks
          - name: manifest
      steps:
      - - name: verify-restore
          template: placeholder-verify-restore
          arguments:
            parameters:
              - name: version_argo_tasks
                value: "{{inputs.parameters.version_argo_tasks}}"
              - name: restore_manifest
                value: "{{inputs.parameters.manifest}}"
      - - name: copy-parse
          template: placeholder-copy-parse
          arguments:
            parameters:
              - name: copy_manifest
                value: "{{= sprig.replace('manifest.json', 'copy-manifests.json', inputs.parameters.manifest)}}"
          when: "{{steps.verify-restore.outputs.parameters.result}} == true"
#      - - name: copy
#            templateRef:
#                name: tpl-copy
#                template: main
#            arguments:
#              parameters: # hardcode some values as they are specific for copying restored files
#                - name: copy_option
#                  value: '--force-no-clobber'
#                - name: file
#                  value: '{{item}}'
#                - name: version_argo_tasks
#                  value: '{{inputs.parameters.version_argo_tasks}}'
#                - name: aws_role_config_path
#                  value: 's3://linz-bucket-config/config-write.topographic.json, s3://linz-bucket-config/config-write.hydrographic.json'
#            depends: 'copy-parse.Succeeded'

# FIXME: this step will run verify-restore this is a temporary placeholder; see commented out code below
    - name: placeholder-verify-restore
      inputs:
        parameters:
          - name: version_argo_tasks
          - name: restore_manifest
      script:
        image: python:3.9
        command: [python]
        source: |
            print(f"{{true}}")
            with open("/tmp/result.json", "w") as f:
                f.write(f"true")
      outputs:
        parameters:
          - name: result
            valueFrom:
              path: /tmp/result.json

#        - - name: verify-restore
#            templateRef:
#              name: test-tpl-at-verify-restore
#              template: main
#            arguments:
#              parameters:
#                - name: version_argo_tasks
#                  value: "{{inputs.parameters.version_argo_tasks}}"
#                - name: aws_role_config_path
#                  value: 's3://linz-bucket-config/config-write.topographic.json, s3://linz-bucket-config/config-write.hydrographic.json'
#                - name: manifest
#                  value: "{{inputs.restore_manifest}}"

# TODO: Plan is to use public.ecr.aws/aws-cli/aws-cli:2.27.62 to get the copy-manifests.json file, read the contents and pass to copy template
    - name: placeholder-copy-parse
      inputs:
        parameters:
          - name: copy_manifest
      script:
        image: python:alpine3.6
        command: [python]
        source: |
          print("true")

    - name: exit-handler
      retryStrategy:
        limit: '0' # `tpl-exit-handler` retries itself
      steps:
        - - name: exit
            templateRef:
              name: tpl-exit-handler
              template: main
            arguments:
              parameters:
                - name: workflow_status
                  value: '{{workflow.status}}'
                - name: workflow_parameters
                  value: '{{workflow.parameters}}'
