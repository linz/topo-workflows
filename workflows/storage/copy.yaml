# yaml-language-server: $schema=https://raw.githubusercontent.com/argoproj/argo-workflows/v3.5.5/api/jsonschema/schema.json

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: copy
spec:
  parallelism: 50
  nodeSelector:
    karpenter.sh/capacity-type: 'spot'
  entrypoint: main
  onExit: exit-handler
  synchronization:
    semaphore:
      configMapKeyRef:
        name: semaphores
        key: bulkcopy
  workflowMetadata:
    labelsFrom:
      linz.govt.nz/user-group:
        expression: workflow.parameters.user_group
      linz.govt.nz/ticket:
        expression: workflow.parameters.ticket
      linz.govt.nz/region:
        expression: workflow.parameters.region
  podMetadata:
    labels:
      linz.govt.nz/user-group: '{{workflow.parameters.user_group}}'
      linz.govt.nz/ticket: '{{workflow.parameters.ticket}}'
      linz.govt.nz/region: '{{workflow.parameters.region}}'
  arguments:
    parameters:
      - name: version_argo_tasks
        value: 'v4'
      - name: user_group
        description: Group of users running the workflow
        value: 'none'
        enum:
          - 'land'
          - 'sea'
          - 'none'
      - name: ticket
        description: Ticket ID e.g. 'AIP-55'
        value: ''
      - name: region
        description: Region of the dataset
        value: 'new-zealand'
        enum:
          - 'antarctica'
          - 'auckland'
          - 'bay-of-plenty'
          - 'canterbury'
          - 'gisborne'
          - 'global'
          - 'hawkes-bay'
          - 'manawatu-whanganui'
          - 'marlborough'
          - 'nelson'
          - 'new-zealand'
          - 'northland'
          - 'otago'
          - 'pacific-islands'
          - 'southland'
          - 'taranaki'
          - 'tasman'
          - 'waikato'
          - 'wellington'
          - 'west-coast'
      - name: source
        value: 's3://linz-imagery-staging/test/sample/'
      - name: target
        value: 's3://linz-imagery-staging/test/sample_target/'
      - name: include
        value: '\.tiff?$|\.json$|\.tfw$|/capture-area\.geojson$|/capture-dates\.geojson$'
      - name: exclude
        value: ''
      - name: copy_option
        value: '--no-clobber'
        enum:
          - '--no-clobber'
          - '--force'
          - '--force-no-clobber'
      - name: flatten
        description: Flatten the files in the target location
        value: 'false'
        enum:
          - 'true'
          - 'false'
      - name: group
        value: '1000'
      - name: group_size
        value: '100Gi'
      - name: transform
        value: 'f'
      - name: aws_role_config_path
        description: s3 URL or comma-separated list of s3 URLs allowing the workflow to write to a target(s)
        value: 's3://linz-bucket-config/config-write.elevation.json,s3://linz-bucket-config/config-write.imagery.json,s3://linz-bucket-config/config-write.topographic.json'
  templateDefaults:
    container:
      imagePullPolicy: Always
      image: ''

  templates:
    - name: main
      retryStrategy:
        expression: 'false'
      inputs:
        parameters:
          - name: source
            value: '{{workflow.parameters.source}}'
          - name: target
            value: '{{workflow.parameters.target}}'
          - name: include
            value: '{{workflow.parameters.include}}'
          - name: exclude
            value: '{{workflow.parameters.exclude}}'
          - name: copy_option
            value: '{{workflow.parameters.copy_option}}'
            default: '--no-clobber'
          - name: aws_role_config_path
            value: '{{workflow.parameters.aws_role_config_path}}'
            default: 's3://linz-bucket-config/config-write.elevation.json,s3://linz-bucket-config/config-write.imagery.json,s3://linz-bucket-config/config-write.topographic.json'
          - name: flatten
            value: '{{workflow.parameters.flatten}}'
            default: 'false'
          - name: transform
            value: '{{workflow.parameters.transform}}'
            default: 'f'
          - name: group
            value: '{{workflow.parameters.group}}'
            default: '1000'
          - name: group_size
            value: '{{workflow.parameters.group_size}}'
            default: '100Gi'
          - name: version_argo_tasks
            value: '{{workflow.parameters.version_argo_tasks}}'
            default: 'v4'
          - name: compress # This should not be exposed to the user (as a workflow parameter)
            default: 'false'
          - name: decompress # This should not be exposed to the user (as a workflow parameter)
            default: 'false'
          - name: delete_source # This should not be exposed to the user (as a workflow parameter)
            default: 'false'
          - name: delete_empty_folders # This should not be exposed to the user (as a workflow parameter)
            default: 'false'
      dag:
        tasks:
          - name: create-manifest
            templateRef:
              name: tpl-create-manifest
              template: main
            arguments:
              parameters:
                - name: source
                  value: '{{inputs.parameters.source}}'
                - name: target
                  value: '{{inputs.parameters.target}}'
                - name: include
                  value: '{{inputs.parameters.include}}'
                - name: exclude
                  value: '{{inputs.parameters.exclude}}'
                - name: flatten
                  value: '{{inputs.parameters.flatten}}'
                - name: transform
                  value: '{{inputs.parameters.transform}}'
                - name: group
                  value: '{{inputs.parameters.group}}'
                - name: group_size
                  value: '{{inputs.parameters.group_size}}'
                - name: version_argo_tasks
                  value: '{{inputs.parameters.version_argo_tasks}}'

          - name: copy
            templateRef:
              name: tpl-copy
              template: main
            arguments:
              parameters:
                - name: copy_option
                  value: '{{inputs.parameters.copy_option}}'
                - name: file
                  value: '{{item}}'
                - name: compress
                  value: '{{inputs.parameters.compress}}'
                - name: delete_source
                  value: '{{inputs.parameters.delete_source}}'
                - name: version_argo_tasks
                  value: '{{inputs.parameters.version_argo_tasks}}'
                - name: aws_role_config_path
                  value: '{{inputs.parameters.aws_role_config_path}}'
            depends: 'create-manifest'
            withParam: '{{tasks.create-manifest.outputs.parameters.files}}'
          - name: delete-empty-folders # runs only if specified when archiving
            templateRef:
              name: tpl-at-delete-empty-folders
              template: main
            arguments:
              parameters:
                - name: location
                  value: '{{inputs.parameters.source}}'
                - name: dry_run
                  value: 'false'
                - name: version
                  value: '{{inputs.parameters.version_argo_tasks}}'
                - name: aws_role_config_path
                  value: 's3://linz-bucket-config/config-write.topographic.json,s3://linz-bucket-config/config-write.hydrographic.json'
            depends: 'copy.Succeeded'
            when: "'{{inputs.parameters.delete_empty_folders}}' == 'true'"

    - name: exit-handler
      retryStrategy:
        limit: '0' # `tpl-log-notification` retries itself
      steps:
        - - name: exit
            templateRef:
              name: tpl-log-notification
              template: main
            arguments:
              parameters:
                - name: workflow_status
                  value: '{{workflow.status}}'
                - name: workflow_parameters
                  value: '{{workflow.parameters}}'
