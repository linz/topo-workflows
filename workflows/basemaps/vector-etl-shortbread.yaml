# yaml-language-server: $schema=https://raw.githubusercontent.com/argoproj/argo-workflows/v3.5.5/api/jsonschema/schema.json

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: test-basemaps-vector-etl-shortbread
  labels:
    linz.govt.nz/category: basemaps
    linz.govt.nz/data-type: vector
spec:
  parallelism: 20
  entrypoint: main
  onExit: exit-handler
  podMetadata:
    labels:
      linz.govt.nz/category: basemaps
      linz.govt.nz/data-type: vector
  arguments:
    parameters:
      - name: version_basemaps_cli
        description: Version of the basemaps CLI docker container to use
        value: pr-3444

      - name: version_argo_tasks
        description: Version of the Argo Tasks CLI docker container to use
        value: 'pr-1228'

      - name: target
        description: S3 Bucket to use for storing the output
        value: 's3://linz-basemaps-staging'
        enum:
          - 's3://linz-basemaps'
          - 's3://linz-basemaps-staging'

      - name: cache
        description: mbtiles cache location
        value: 's3://linz-basemaps-staging/mbtiles-cache/'

      - name: tile_matrix
        description: Output tile matrix, ";" separated list
        value: 'WebMercatorQuad'
        enum:
          - 'NZTM2000Quad'
          - 'WebMercatorQuad'

      - name: retry
        description: Number of retry on failure vector-etl task
        value: '2'

      - name: group_size
        description: Number of layers grouped together, default to 100
        value: '100'

      - name: concurrency
        description: Number of layers process in concurrency, default to 20
        value: '20'

      - name: create_pull_request
        description: Should a pull request be created in linz/basemaps-config
        value: 'true'
        enum:
          - 'true'
          - 'false'

  templateDefaults:
    container:
      imagePullPolicy: Always
      image: ''

  templates:
    - name: main
      retryStrategy:
        expression: 'false'
      dag:
        tasks:
          - name: extract
            template: extract

          - name: group
            depends: extract
            when: '{{tasks.extract.outputs.parameters.updateRequired}} == true'
            templateRef:
              name: tpl-at-group
              template: main
            arguments:
              parameters:
                - name: size
                  value: '{{ workflow.parameters.group_size }}'
                - name: version
                  value: '{{= workflow.parameters.version_argo_tasks }}'
              artifacts:
                - name: input
                  from: '{{ tasks.extract.outputs.artifacts.smallLayers }}'

          - name: create-small-layers
            depends: 'group'
            when: '{{tasks.extract.outputs.parameters.updateRequired}} == true'
            template: create-small-layers
            withParam: '{{ tasks.group.outputs.parameters.output }}'
            arguments:
              parameters:
                - name: grouped_id
                  value: '{{ item }}'
              artifacts:
                - name: grouped
                  from: '{{ tasks.group.outputs.artifacts.output }}'

          - name: create-large-layers
            depends: 'extract'
            when: '{{tasks.extract.outputs.parameters.updateRequired}} == true'
            template: create-large-layers
            withParam: '{{ tasks.extract.outputs.parameters.largeLayers }}'
            arguments:
              parameters:
                - name: path
                  value: '{{ item.path }}'

          - name: tile-join
            depends: 'create-large-layers && create-small-layers'
            when: '{{tasks.extract.outputs.parameters.updateRequired}} == true'
            template: tile-join
            arguments:
              artifacts:
                - name: input
                  from: '{{ tasks.extract.outputs.artifacts.allCaches }}'

          - name: analyse
            depends: 'tile-join'
            when: '{{tasks.extract.outputs.parameters.updateRequired}} == true'
            template: analyse
            arguments:
              parameters:
                - name: mbTilesTarget
                  value: '{{ tasks.tile-join.outputs.parameters.mbTilesTarget }}'

          - name: create-pull-request
            template: create-pull-request
            arguments:
              parameters:
                - name: target
                  value: '{{ tasks.tile-join.outputs.parameters.target }}'
            when: '{{ workflow.parameters.create_pull_request }} == true && {{tasks.extract.outputs.parameters.updateRequired}} == true'
            depends: 'analyse'

    - name: extract
      container:
        image: ghcr.io/linz/basemaps/cli:{{ workflow.parameters.version_basemaps_cli }}
        command: [node, index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.basemaps.json
        args:
          - 'vector'
          - 'extract'
          - '--cache={{ workflow.parameters.cache }}'
          - '--tile-matrix={{ workflow.parameters.tile_matrix }}'
      outputs:
        parameters:
          - name: updateRequired
            valueFrom:
              path: '/tmp/extract/updateRequired'
          - name: largeLayers
            valueFrom:
              path: '/tmp/extract/largeLayers.json'
        artifacts:
          - name: smallLayers
            path: '/tmp/extract/smallLayers.json'
          - name: allCaches
            path: '/tmp/extract/allCaches.json'

    - name: create-small-layers
      retryStrategy:
        limit: '{{workflow.parameters.retry}}'
        retryPolicy: 'Always'
      nodeSelector:
        karpenter.sh/capacity-type: 'spot'
      inputs:
        artifacts:
          - name: grouped
            path: /tmp/group/grouped/
        parameters:
          - name: grouped_id
      container:
        image: ghcr.io/linz/basemaps/cli:{{ workflow.parameters.version_basemaps_cli }}
        resources:
          requests:
            memory: 7.8Gi
            cpu: 15000m
        command: [node, index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.basemaps.json
        args:
          - 'vector'
          - 'create'
          - '--from-file={{= inputs.artifacts.grouped.path }}{{inputs.parameters.grouped_id}}.json'
          - '--concurrency={{ workflow.parameters.concurrency }}'

    - name: create-large-layers
      retryStrategy:
        limit: '{{workflow.parameters.retry}}'
        retryPolicy: 'Always'
      nodeSelector:
        karpenter.sh/capacity-type: 'spot'
      inputs:
        parameters:
          - name: path
      container:
        image: ghcr.io/linz/basemaps/cli:{{ workflow.parameters.version_basemaps_cli }}
        resources:
          requests:
            memory: 7.8Gi
            cpu: 15000m
        command: [node, index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.basemaps.json
        args:
          - 'vector'
          - 'create'
          - '{{inputs.parameters.path}}'

    - name: tile-join
      inputs:
        artifacts:
          - name: input
            path: /tmp/extract/allCaches.json
      container:
        image: ghcr.io/linz/basemaps/cli:{{ workflow.parameters.version_basemaps_cli }}
        resources:
          requests:
            memory: 7.8Gi
            cpu: 15000m
        command: [node, index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.basemaps.json
        args:
          - 'vector'
          - 'join'
          - '--from-file={{= inputs.artifacts.input.path }}'
          - '--target={{ workflow.parameters.target }}'
          - '--tile-matrix={{ workflow.parameters.tile_matrix }}'
      outputs:
        parameters:
          - name: target
            valueFrom:
              path: '/tmp/target'
          - name: mbTilesTarget
            valueFrom:
              path: '/tmp/mbTilesTarget'

    - name: analyse
      inputs:
        parameters:
          - name: mbTilesTarget
      container:
        image: ghcr.io/linz/basemaps/cli:{{ workflow.parameters.version_basemaps_cli }}
        resources:
          requests:
            memory: 7.8Gi
            cpu: 15000m
        command: [node, index.cjs]
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.basemaps.json
        args:
          - 'analyse'
          - '{{ inputs.parameters.mbTilesTarget }}'
          - '--target==/tmp'

    - name: create-pull-request
      inputs:
        parameters:
          - name: target
      container:
        image: 019359803926.dkr.ecr.ap-southeast-2.amazonaws.com/argo-tasks:{{ workflow.parameters.version_argo_tasks }}
        env:
          - name: AWS_ROLE_CONFIG_PATH
            value: s3://linz-bucket-config/config.basemaps.json
          - name: GITHUB_API_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-linz-li-bot-pat
                key: pat
        args:
          - 'bmc'
          - 'create-pr'
          - '--target={{ inputs.parameters.target }}'
          - '--config-type=vector'

    - name: exit-handler
      retryStrategy:
        limit: '0' # `tpl-exit-handler` retries itself
      steps:
        - - name: exit
            templateRef:
              name: tpl-exit-handler
              template: main
            arguments:
              parameters:
                - name: workflow_status
                  value: '{{workflow.status}}'
                - name: workflow_parameters
                  value: '{{workflow.parameters}}'
