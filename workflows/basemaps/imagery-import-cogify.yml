# yaml-language-server: $schema=https://raw.githubusercontent.com/argoproj/argo-workflows/v3.5.5/api/jsonschema/schema.json

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: basemaps-imagery-import-cogify
  labels:
    linz.govt.nz/category: basemaps
    linz.govt.nz/data-type: raster
spec:
  parallelism: 100
  entrypoint: main
  onExit: exit-handler
  synchronization:
    semaphore:
      configMapKeyRef:
        name: semaphores
        key: basemaps_import
  templateDefaults:
    container:
      imagePullPolicy: Always
      image: ''
  workflowMetadata:
    labelsFrom:
      linz.govt.nz/user-group:
        expression: workflow.parameters.user_group
      linz.govt.nz/ticket:
        expression: workflow.parameters.ticket
      linz.govt.nz/region:
        expression: workflow.parameters.region
  podMetadata:
    labels:
      linz.govt.nz/user-group: '{{workflow.parameters.user_group}}'
      linz.govt.nz/category: basemaps
      linz.govt.nz/data-type: raster
      linz.govt.nz/ticket: '{{workflow.parameters.ticket}}'
      linz.govt.nz/region: '{{workflow.parameters.region}}'
  arguments:
    parameters:
      - name: version_basemaps_cli
        description: Version of the basemaps CLI docker container to use
        value: v8

      - name: version_argo_tasks
        description: Version of the argo-tasks CLI docker container to use
        value: v4

      - name: user_group
        description: Group of users running the workflow
        value: 'none'
        enum:
          - 'land'
          - 'sea'
          - 'none'

      - name: ticket
        description: Ticket ID e.g. 'AIP-55'
        value: ''

      - name: preset
        description: Import preset configuration, WebP for 4 band RGBA LERC for 1 band DEM/DSM
        value: 'webp'
        enum:
          - 'webp'
          - 'lerc_10mm'
          - 'lerc_1mm'

      - name: region
        description: Region of the dataset
        value: 'new-zealand'
        enum:
          - 'antarctica'
          - 'auckland'
          - 'bay-of-plenty'
          - 'canterbury'
          - 'gisborne'
          - 'global'
          - 'hawkes-bay'
          - 'manawatu-whanganui'
          - 'marlborough'
          - 'nelson'
          - 'new-zealand'
          - 'northland'
          - 'otago'
          - 'pacific-islands'
          - 'southland'
          - 'taranaki'
          - 'tasman'
          - 'waikato'
          - 'wellington'
          - 'west-coast'

      - name: source
        description: Source imagery location "s3://linz-imagery"
        value: 's3://linz-imagery-staging/test/sample/'

      - name: require_stac_collection
        description: Validate that a STAC collection.json exists with the source
        value: 'true'
        enum:
          - 'true'
          - 'false'

      - name: create_pull_request
        description: 'Create pull request after importing imagery.'
        value: 'true'
        enum:
          - 'true'
          - 'false'

      - name: config_type
        description: 'Type of Basemaps Config file to create in pull requests'
        value: 'raster'
        enum:
          - 'raster'
          - 'elevation'

      - name: individual
        description: 'Individual Config or Combined Config'
        value: 'combined'
        enum:
          - 'individual'
          - 'combined'

      - name: category
        value: 'Rural Aerial Photos'
        enum:
          - 'Rural Aerial Photos'
          - 'Urban Aerial Photos'
          - 'Scanned Aerial Imagery'
          - 'Satellite Imagery'
          - 'Event'
          - 'Elevation'

      - name: target
        description: Target location for output COGs
        value: 's3://linz-basemaps/'
        enum:
          - 's3://linz-basemaps/'
          - 's3://linz-basemaps-staging/'
          - 's3://linz-workflows-scratch/'

      - name: tile_matrix
        description: Output tile matrix, ";" separated list
        value: 'NZTM2000Quad;WebMercatorQuad'
        enum:
          - 'NZTM2000Quad'
          - 'WebMercatorQuad'
          - 'NZTM2000Quad;WebMercatorQuad'

      - name: cutline
        description: Path to cutline to apply
        value: 's3://linz-basemaps-source/cutline/2025-04-30-cutline-nz-coasts-rural-and-urban.geojson'

      - name: cutline_blend
        description: Blending to use for cutline see gdal_translate#cblend
        value: '20'

      - name: group_size
        description: How many items to pass to each create-cog job
        value: '20'

      - name: create_overview
        description: 'Create overview after importing imagery.'
        value: 'true'
        enum:
          - 'true'
          - 'false'

      - name: background
        description: 'Background RGBA hexstring to fill empty space in the COG. Format: "#rrggbbaa"'
        value: ''

      - name: base_zoom_offset
        description: 'Adjust the base zoom level of the output COGS, "-1" reduce the target output resolution by one zoom level'
        value: ''

  templates:
    # Main entrypoint into the workflow
    - name: main
      retryStrategy:
        expression: 'false'
      inputs:
        parameters:
          - name: source
          - name: target
          - name: preset
          - name: tile_matrix
          - name: cutline
          - name: cutline_blend
          - name: group_size
          - name: require_stac_collection
          - name: base_zoom_offset
          - name: background
      dag:
        tasks:
          # For each tile matrix specified run the "cogify" template
          - name: cogify
            templateRef:
              name: tpl-bm-cogify
              template: main
            withParam: "{{= toJson(sprig.splitList(';', inputs.parameters.tile_matrix)) }}"
            arguments:
              parameters:
                - name: source
                  value: '{{ inputs.parameters.source }}'
                - name: target
                  value: '{{ inputs.parameters.target }}'
                - name: preset
                  value: '{{ inputs.parameters.preset }}'
                - name: tile_matrix
                  value: '{{ item }}'
                - name: cutline
                  value: '{{ inputs.parameters.cutline }}'
                - name: cutline_blend
                  value: '{{ inputs.parameters.cutline_blend }}'
                - name: group_size
                  value: '{{ inputs.parameters.group_size }}'
                - name: require_stac_collection
                  value: '{{ inputs.parameters.require_stac_collection }}'
                - name: base_zoom_offset
                  value: '{{ inputs.parameters.base_zoom_offset }}'
                - name: background
                  value: '{{ inputs.parameters.background }}'
          - name: create-pull-request
            templateRef:
              name: tpl-bm-create-pull-request
              template: main
            arguments:
              parameters:
                - name: target
                  value: '{{ tasks.cogify.outputs.parameters.target }}'
                - name: ticket
                  value: '{{ workflow.parameters.ticket }}'
                - name: config_type
                  value: '{{ workflow.parameters.config_type }}'
                - name: individual
                  value: '{{ workflow.parameters.individual }}'
                - name: category
                  value: '{{ workflow.parameters.category }}'
            when: '{{workflow.parameters.create_pull_request}} == true'
            depends: 'cogify'

    - name: exit-handler
      retryStrategy:
        limit: '0' # `tpl-exit-handler` retries itself
      steps:
        - - name: exit
            templateRef:
              name: tpl-exit-handler
              template: main
            arguments:
              parameters:
                - name: workflow_status
                  value: '{{workflow.status}}'
                - name: workflow_parameters
                  value: '{{workflow.parameters}}'
